. C:\\GFL-System\\Utils\\GFL-Logging.ps1
param([string]$ScriptsRoot='C:\\GFL-System\\Scripts',[string]$StageRoot='C:\\GFL-System\\Backburner\\scripts\\regenerated',[string]$HashCache='C:\\GFL-System\\Backburner\\state\\script-hashes.json')
$null= New-Item -ItemType Directory -Path $StageRoot -Force; $null= New-Item -ItemType Directory -Path (Split-Path $HashCache -Parent) -Force
function Get-Hash($p){ if(Test-Path $p){ return (Get-FileHash -Algorithm SHA256 -LiteralPath $p).Hash } $null }
function Harden-Code([string]$code,[string]$src){ $code=$code -replace "\r\n?","`n"; $code=$code -replace "\?\.", "."; $code=$code -replace "\?\?", " -ne $null ? $var : "; if($code -notmatch 'ErrorActionPreference'){ $code = "$ErrorActionPreference = 'Stop'`n" + $code }; if($code -notmatch 'Write-GFLLog'){ $code = "# Wrapped by Regenerator`ntry {`n  Write-GFLLog 'Script start: $src'`n" + $code + "`n  Write-GFLLog 'Script end: $src' 'OK'`n} catch { Write-GFLLog \"Script error ($src): $($_.Exception.Message)\" 'ERR'; throw }`n" }; $code=$code -replace "Invoke-WebRequest (.+?) -OutFile (.+)", "`nfor($i=0;$i -lt 3;$i++){ try{ Invoke-WebRequest $1 -OutFile $2 -UseBasicParsing; break } catch{ Start-Sleep 2; if($i -eq 2){ throw } } }"; $hdr=@"`n<# Auto-Generated by GFL Regenerator on $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') | Source: $src #>`n"@; return $hdr + $code }
$cache=@{}; if(Test-Path $HashCache){ try{ $cache=(Get-Content $HashCache -Raw | ConvertFrom-Json) } catch{ $cache=@{} } }
$targets= Get-ChildItem $ScriptsRoot -Filter '*.ps1' -Recurse -ErrorAction SilentlyContinue; $c=0
foreach($f in $targets){ $h=Get-Hash $f.FullName; if($h -and $cache[$f.FullName] -eq $h){ continue }; $gen= Join-Path $StageRoot ($f.BaseName + '.gen.ps1'); $code= Get-Content $f.FullName -Raw; $new= Harden-Code $code $f.FullName; $new | Set-Content -LiteralPath $gen -Encoding UTF8; try{ $null=[System.Management.Automation.Language.Parser]::ParseFile($gen,[ref]$null,[ref]$null) } catch { Write-GFLLog "Parse failed (gen): $gen :: $($_.Exception.Message)" 'ERR'; continue }; $backupDir='C:\\GFL-System\\Backburner\\backups\\scripts'; New-Item -ItemType Directory -Force -Path $backupDir | Out-Null; $ts=Get-Date -Format 'yyyyMMdd-HHmmss'; $bak= Join-Path $backupDir ((Split-Path $f.FullName -Leaf)+".bak.$ts"); Copy-Item -LiteralPath $f.FullName -Destination $bak -Force; Copy-Item -LiteralPath $gen -Destination $f.FullName -Force; $cache[$f.FullName]= Get-Hash $f.FullName; $c++; Write-GFLLog "Regenerated: $($f.FullName) -> backup: $(Split-Path $bak -Leaf)" 'OK' }
($cache | ConvertTo-Json -Depth 5) | Set-Content -LiteralPath $HashCache -Encoding UTF8
Write-GFLLog "Regenerator complete. Updated: $c scripts" 'INFO'


